[gui]
[spectrogram]
[postfilter]
[cpitch]
# nfft: number of bins in the frequency grid.
# larger values give higher precision
# smaller values give lower variance
nfft=512
#256

# shift: number of samples between analysis frames
# smaller values increase temporal resolution, increase computational time
shift=600
#30

# winsize: number of samples in the analysis window
# larger values increase spectral resolution, decrease temporal resolution
# smaller values decrease spectral and increase temporal
winsize=401

# freq_range:  the range of frequencies to analyze
# can be in Hz or relative frequency units
freq_range=(750,15000)

# pitch_range:  the range of frequencies to consider as possible pitches
# can be Hz or relative frequency units
# should be smaller than freq_range
pitch_range=(900,8000)

# lobes: number of lobes in the harmonic template
# set to approximately 2x the number of harmonics
lobes=7

# lobe_decay: controls how energy of successive lobes decreases
# smaller values can help with pitch doubling errors but decrease
# integration of multiple harmonics
lobe_decay=0.85

# neg_ampl: size of negative lobes in harmonic template
# value is from Shapiro and Wang; haven't tested it much
# 0 to disable
neg_ampl=0
#0.35

# neg_width: width of negative lobes, in pitch index units
# doesn't appear to have a big effect
neg_width=9

# remask_likelihood: if True, apply mask to likelihood as well as to
# spectrogram. This implies that the mask specifies a hard prior on
# the possible values for the pitch.  This can drastically reduce
# pitch halving errors, but it makes masking errors much more serious.
remask_likelihood = False
#True

# max_jump: the maximum amount the pitch can change between frames, in
# pitch index units. This is a hard upper limit so be liberal.  If the
# number is too small the tracker may not be able to move fast enough.
max_jump=80

# particles:  the number of particles in the particle filter
# increase to get better estimates, at the expense of more computations
particles=10
#500

# pow_thresh: minimum power in a frame for it to be included in
# analysis.  In linear units.  Increasing this will reduce the
# contribution of frames that don't contain enough information to
# reasonably estimate the pitch.  Frames with insufficient power that
# are located at the beginnings and ends of the signal may be trimmed
# off.  Also see [postfilter] section.
pow_thresh=1e4

# row_thresh: minimum proportion of nonzero frequency bands in the
# spectrogram for a frame to be included in analysis. This helps to
# eliminate some errors where masks are very narrow at beginnings and
# ends.
row_thresh=0.02

# rwalk_scale: when frames are excluded because of low power, pitch is
# allowed to drift. This sets standard deviation
rwalk_scale=2

# chains: number of independent chains.  More chains equals better
# estimates but more computations
chains=1
#5

# btrace: set True to run reverse Vitterbi filter and find maximum a
# posteriori paths.  Generally this is a better estimator, but the
# calculation is very intensive computationally, increasing O(N^2)
# with the number of particles.
btrace=True

[masker]
[gui]
[ccompare]
[dtw]

# metric: the metric for comparing pairs of time points in the
# signals. This provides the base cost for comparing the signals.
#         euclidean = \sqrt (\sum_n (x-y)^2) [n>=1]
#         cosine    = abs(1 - sum_n (xy) / (||x|| ||y||)) [n>1]
metric = euclidean
cost_matrix = [(1,1,1),(1,2,2),(2,1,2)]
dynamic_cost = False

[spcc]

# freq_range: the range of frequencies to compare (in Hz)
freq_range = (750.0, 10000.0)

# nfreq:      the number of frequency bands to compare (may be one
#             less than this number if an integral number doesn't fit
#             in the frequency band)
nfreq = 100

# window_shift: amount of time to shift between analysis windows (in ms)
window_shift = 1.0

# spec_method: the time/frequency representation to use
#              hanning (default), hamming, blackman: standard STFT
#              cepstrum: cepstral coefficients
#              tfr: reassignment spectrogram (not recommended)
spec_method = hanning

# powscale:   the power scale to use ('linear' or 'log'). The compression of the log
#             increases CC values overall and should ony be used for noise-free
#             recordings.  DO NOT use log scale with a poly mask as the edges
# 	      of the mask will likely be much larger than the true signal
powscale = linear

# mask:       mask spectrograms using ebl file (if it exists)?
#             none: no masking
#             box:  temporal bounding boxes of the polygons (default)
#             poly: full mask
mask = box

# biased_norm: if True, use the L2 norm of both signals to normalize
#              cross-correlation.  This mode can bias CC downward if
#              there are strong signals outside the match area, which
#              can be a good penalty for differences in duration.  If
#              False, uses the L2 norm of the parts of the signals
#              that overlap; in this case it's important to use
#              signals with little zero-padding on the ends to avoid
#              edge effects.
biased_norm = True

# subtract_mean: if True, the mean is subtracted from the spectrograms before
#                doing the cross-correlation. This can help to compensate for
#                overall differences in level and generally leads to sharper
#                peaks.
subtract_mean = True

